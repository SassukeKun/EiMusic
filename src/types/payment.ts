// üìÅ CAMINHO: src/types/payment.ts
// üéØ FUN√á√ÉO: Interfaces TypeScript para o sistema de pagamentos
// üìù DESCRI√á√ÉO: Define todos os tipos, interfaces e constantes usadas nos pagamentos

/**
 * Interfaces TypeScript para o sistema de pagamentos
 * Seguindo o padr√£o de tipagem rigorosa da plataforma
 */

// Tipos de m√©todos de pagamento suportados
export type PaymentMethod = 'mpesa' | 'paypal'

// Tipos de planos dispon√≠veis
export type PlanType = 'premium' | 'vip'

// Status poss√≠veis de uma transa√ß√£o
export type TransactionStatus = 'pending' | 'completed' | 'failed' | 'cancelled'

// Severidade de erros
export type ErrorSeverity = 'low' | 'medium' | 'high'

/**
 * Interface para dados de pagamento bem-sucedido
 * Usada na tela de confirma√ß√£o de sucesso
 */
export interface PaymentSuccessData {
  transactionId: string
  method: PaymentMethod
  planName: string
  planPrice: number
  userEmail: string
  activationDate: string
}

/**
 * Interface para dados de erro de pagamento
 * Usada na tela de erro com troubleshooting
 */
export interface PaymentErrorData {
  errorCode: string
  errorMessage: string
  method: PaymentMethod
  planName: string
  planPrice: number
  transactionId?: string
  timestamp: string
}

/**
 * Interface para dados de processamento de pagamento
 * Usada pelo servi√ßo de pagamento
 */
export interface PaymentProcessData {
  method: PaymentMethod
  planName: string
  planPrice: number
  userEmail: string
  formData: MpesaFormData | PayPalFormData
}

/**
 * Interface para formul√°rio M-Pesa
 * Dados espec√≠ficos para pagamento via M-Pesa
 */
export interface MpesaFormData {
  phoneNumber: string
  confirmPhoneNumber: string
  agreesToTerms: boolean
}

/**
 * Interface para formul√°rio PayPal/Visa
 * Dados espec√≠ficos para pagamento internacional
 */
export interface PayPalFormData {
  email: string
  confirmEmail: string
  paymentType: 'paypal' | 'visa'
  // Campos opcionais para cart√£o Visa
  cardNumber?: string
  expiryDate?: string
  cvv?: string
  cardHolder?: string
  agreesToTerms: boolean
}

/**
 * Interface para resultado de processamento
 * Retornada pelos m√©todos de pagamento
 */
export interface PaymentResult {
  success: boolean
  transactionId?: string
  errorCode?: string
  errorMessage?: string
}

/**
 * Interface para valida√ß√£o de dados
 * Retornada pela valida√ß√£o de formul√°rios
 */
export interface ValidationResult {
  isValid: boolean
  errors: string[]
}

/**
 * Interface para detalhes de erro
 * Mapeamento de c√≥digos para mensagens amig√°veis
 */
export interface ErrorDetails {
  title: string
  description: string
  severity: ErrorSeverity
}

/**
 * Interface para informa√ß√µes do m√©todo de pagamento
 * Usada para renderiza√ß√£o condicional
 */
export interface PaymentMethodInfo {
  icon: React.ReactNode
  name: string
  color: string
  bgColor: string
  borderColor: string
  troubleshooting: string[]
}

/**
 * Interface para plano de assinatura
 * Dados do plano selecionado
 */
export interface SubscriptionPlan {
  id: PlanType
  name: string
  price: number
  description: string
  features: string[]
}

/**
 * Interface para dados da assinatura do usu√°rio
 * Armazenada na base de dados
 */
export interface UserSubscription {
  id: string
  user_id: string
  plan_type: PlanType
  status: 'active' | 'inactive' | 'expired' | 'cancelled'
  start_date: string
  end_date: string
  transaction_id: string
  auto_renew: boolean
  created_at: string
  updated_at: string
}

/**
 * Interface para transa√ß√£o de pagamento
 * Hist√≥rico de transa√ß√µes na base de dados
 */
export interface PaymentTransaction {
  id: string
  user_id: string
  transaction_id: string
  amount: number
  currency: 'MZN' | 'USD'
  status: TransactionStatus
  payment_method: PaymentMethod
  plan_type: PlanType
  processed_at: string
  created_at: string
  // Metadados adicionais
  metadata?: {
    phone_number?: string
    email?: string
    error_code?: string
    retry_count?: number
  }
}

/**
 * Interface para resposta da API de pagamento
 * Padroniza√ß√£o das respostas das APIs externas
 */
export interface PaymentApiResponse {
  success: boolean
  transactionId?: string
  errorCode?: string
  errorMessage?: string
  metadata?: Record<string, any>
}

/**
 * Interface para configura√ß√£o do provedor de pagamento
 * Configura√ß√µes espec√≠ficas por m√©todo
 */
export interface PaymentProviderConfig {
  mpesa: {
    apiUrl: string
    businessShortCode: string
    passkey: string
    callbackUrl: string
  }
  paypal: {
    clientId: string
    clientSecret: string
    environment: 'sandbox' | 'production'
    webhookUrl: string
  }
}

/**
 * Mapeamento de c√≥digos de erro para mensagens
 * Usado para exibir mensagens amig√°veis ao usu√°rio
 */
export const ERROR_CODES: Record<string, ErrorDetails> = {
  INSUFFICIENT_FUNDS: {
    title: 'Saldo Insuficiente',
    description: 'N√£o tens saldo suficiente na tua conta para completar esta transa√ß√£o.',
    severity: 'medium'
  },
  INVALID_CARD: {
    title: 'Cart√£o Inv√°lido',
    description: 'Os dados do cart√£o est√£o incorretos ou o cart√£o n√£o √© aceito.',
    severity: 'high'
  },
  NETWORK_ERROR: {
    title: 'Erro de Liga√ß√£o',
    description: 'Problema de liga√ß√£o durante o processamento. Tenta novamente.',
    severity: 'low'
  },
  MPESA_TIMEOUT: {
    title: 'Tempo Limite M-Pesa',
    description: 'N√£o recebemos confirma√ß√£o do M-Pesa a tempo. Verifica o teu telem√≥vel.',
    severity: 'medium'
  },
  DECLINED: {
    title: 'Pagamento Recusado',
    description: 'O pagamento foi recusado pelo banco ou operadora.',
    severity: 'high'
  },
  VALIDATION_ERROR: {
    title: 'Dados Inv√°lidos',
    description: 'Alguns dados fornecidos s√£o inv√°lidos. Verifica e tenta novamente.',
    severity: 'medium'
  },
  DATABASE_ERROR: {
    title: 'Erro do Sistema',
    description: 'Pagamento processado mas erro na ativa√ß√£o. Contacta o suporte.',
    severity: 'high'
  },
  UNEXPECTED_ERROR: {
    title: 'Erro Inesperado',
    description: 'Ocorreu um erro inesperado. Tenta novamente ou contacta o suporte.',
    severity: 'high'
  }
}

/**
 * Configura√ß√µes padr√£o dos planos
 * Valores e caracter√≠sticas de cada plano
 */
export const SUBSCRIPTION_PLANS: Record<PlanType, SubscriptionPlan> = {
  premium: {
    id: 'premium',
    name: 'Premium',
    price: 199,
    description: 'Para verdadeiros amantes da m√∫sica mo√ßambicana',
    features: [
      'Acesso ilimitado √† m√∫sica',
      'Qualidade de √°udio premium',
      'Downloads offline',
      'Sem an√∫ncios'
    ]
  },
  vip: {
    id: 'vip',
    name: 'VIP',
    price: 399,
    description: 'Experi√™ncia completa e exclusiva da cultura musical',
    features: [
      'Todos os benef√≠cios Premium',
      'Acesso a videoclipes HD',
      'Conte√∫do exclusivo',
      'Acesso antecipado a lan√ßamentos',
      'Suporte priorit√°rio'
    ]
  }
}

/**
 * Utilit√°rios de tipo para TypeScript
 * Helpers para trabalhar com as interfaces
 */

// Tipo para props dos componentes de pagamento
export type PaymentComponentProps<T = any> = {
  data: T
  onSuccess?: (result: PaymentResult) => void
  onError?: (error: PaymentErrorData) => void
  onRetry?: () => void
  loading?: boolean
}

// Tipo para handlers de evento
export type PaymentEventHandler<T = any> = (data: T) => void | Promise<void>

// Tipo para par√¢metros de URL de pagamento
export type PaymentUrlParams = {
  transactionId?: string
  method?: PaymentMethod
  planName?: string
  planPrice?: string
  userEmail?: string
  errorCode?: string
  errorMessage?: string
}

// Export default para facilitar importa√ß√£o
export default {
  ERROR_CODES,
  SUBSCRIPTION_PLANS
}